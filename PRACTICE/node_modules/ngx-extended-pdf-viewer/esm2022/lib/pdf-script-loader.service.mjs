import { Injectable, effect, signal } from '@angular/core';
import { getVersionSuffix, pdfDefaultOptions } from './options/pdf-default-options';
import * as i0 from "@angular/core";
import * as i1 from "./pdf-csp-policy.service";
export class PDFScriptLoaderService {
    pdfCspPolicyService;
    forceUsingLegacyES5 = false;
    /** Use the minified (minifiedJSLibraries="true", which is the default) or the user-readable pdf.js library (minifiedJSLibraries="false") */
    _minifiedJSLibraries = false;
    get minifiedJSLibraries() {
        return this._minifiedJSLibraries;
    }
    set minifiedJSLibraries(value) {
        this._minifiedJSLibraries = value;
        if (value) {
            pdfDefaultOptions._internalFilenameSuffix = '.min';
        }
        else {
            pdfDefaultOptions._internalFilenameSuffix = '';
        }
    }
    // this event is fired when the pdf.js library has been loaded and objects like PDFApplication are available
    onPDFJSInitSignal = signal(undefined);
    pdfjsVersion = getVersionSuffix(pdfDefaultOptions.assetsFolder);
    shuttingDown = false;
    _needsES5 = undefined;
    PDFViewerApplication;
    PDFViewerApplicationOptions;
    PDFViewerApplicationConstants;
    webViewerLoad;
    originalPrint = typeof window !== 'undefined' ? window.print : undefined;
    ngxExtendedPdfViewerIncompletelyInitialized = true;
    constructor(pdfCspPolicyService) {
        this.pdfCspPolicyService = pdfCspPolicyService;
        effect(() => {
            if (this.onPDFJSInitSignal()) {
                this.pdfjsVersion = getVersionSuffix(pdfDefaultOptions.assetsFolder);
            }
        });
    }
    addScriptOpChainingSupport() {
        return new Promise((resolve) => {
            const script = this.createScriptElement(pdfDefaultOptions.assetsFolder + '/op-chaining-support.js');
            script.onload = () => {
                script.remove();
                script.onload = null;
                resolve(globalThis.ngxExtendedPdfViewerCanRunModernJSCode);
            };
            script.onerror = () => {
                script.remove();
                globalThis.ngxExtendedPdfViewerCanRunModernJSCode = false;
                resolve(false);
                script.onerror = null;
            };
            document.body.appendChild(script);
        });
    }
    loadCoreLibrary() {
        return new Promise((resolve) => {
            const coreLibraryPath = this.getPdfJsPath('pdf');
            const script = this.createScriptElement(coreLibraryPath);
            script.onload = () => {
                resolve(true);
            };
            script.onerror = () => {
                resolve(false);
                script.onerror = null;
            };
            document.body.appendChild(script);
        });
    }
    createScriptElement(sourcePath) {
        const script = document.createElement('script');
        script.async = true;
        script.type = sourcePath.endsWith('.mjs') ? 'module' : 'text/javascript';
        script.className = `ngx-extended-pdf-viewer-script`;
        this.pdfCspPolicyService.addTrustedJavaScript(script, sourcePath);
        return script;
    }
    createScriptImportElement(viewerPath) {
        const script = document.createElement('script');
        script.async = true;
        script.type = 'module';
        script.className = `ngx-extended-pdf-viewer-script`;
        // this.pdfCspPolicyService.addTrustedJavaScript(script, sourcePath);
        if (viewerPath.startsWith('/') || viewerPath.startsWith('http')) {
        }
        else {
            viewerPath = './' + viewerPath;
        }
        const body = `
      import { webViewerLoad, PDFViewerApplication, PDFViewerApplicationConstants, PDFViewerApplicationOptions } from '${viewerPath}';
      const event = new CustomEvent("ngxViewerFileHasBeenLoaded", {
        detail: {
          PDFViewerApplication,
          PDFViewerApplicationConstants,
          PDFViewerApplicationOptions,
          webViewerLoad
        }
      });
      document.dispatchEvent(event);
      `;
        script.text = body;
        return script;
    }
    getPdfJsPath(artifact) {
        let suffix = this.minifiedJSLibraries && !this._needsES5 ? '.min.js' : '.js';
        const assets = pdfDefaultOptions.assetsFolder;
        const versionSuffix = getVersionSuffix(assets);
        if (versionSuffix.startsWith('4')) {
            suffix = suffix.replace('.js', '.mjs');
        }
        const artifactPath = `/${artifact}-`;
        const es5 = this._needsES5 ? '-es5' : '';
        return assets + artifactPath + versionSuffix + es5 + suffix;
    }
    async loadViewer() {
        return new Promise((resolve) => {
            const viewerPath = this.getPdfJsPath('viewer');
            const listener = (event) => {
                const { PDFViewerApplication, PDFViewerApplicationOptions, PDFViewerApplicationConstants, webViewerLoad } = event.detail;
                this.PDFViewerApplication = PDFViewerApplication;
                this.PDFViewerApplicationOptions = PDFViewerApplicationOptions;
                this.PDFViewerApplicationConstants = PDFViewerApplicationConstants;
                this.webViewerLoad = webViewerLoad;
                resolve();
                document.removeEventListener('ngxViewerFileHasBeenLoaded', listener);
            };
            document.addEventListener('ngxViewerFileHasBeenLoaded', listener, { once: true });
            const script = this.createScriptImportElement(viewerPath);
            document.getElementsByTagName('head')[0].appendChild(script);
        });
    }
    addFeatures() {
        return new Promise((resolve) => {
            const script = this.createScriptElement(pdfDefaultOptions.assetsFolder + '/additional-features.js');
            script.onload = () => {
                script.remove();
            };
            script.onerror = () => {
                script.remove();
                resolve();
            };
            document.body.appendChild(script);
        });
    }
    async ensurePdfJsHasBeenLoaded() {
        if (this.PDFViewerApplication) {
            return true;
        }
        return new Promise(async (resolve) => {
            (async () => {
                this._needsES5 = await this.needsES5();
                await this.loadCoreLibrary();
                await this.loadViewer();
                //this.ngxExtendedPdfViewerIncompletelyInitialized = false;
                resolve(this.PDFViewerApplication !== undefined);
            })();
        });
    }
    ngOnDestroy() {
        this.shuttingDown = true;
        if (typeof window === 'undefined') {
            return; // fast escape for server side rendering
        }
        delete globalThis['setNgxExtendedPdfViewerSource'];
        const PDFViewerApplication = this.PDFViewerApplication;
        PDFViewerApplication?.pdfViewer?.destroyBookMode();
        PDFViewerApplication?.pdfViewer?.stopRendering();
        PDFViewerApplication?.pdfThumbnailViewer?.stopRendering();
        const originalPrint = this.originalPrint;
        if (window && originalPrint && !originalPrint.toString().includes('printPdf')) {
            window.print = originalPrint;
        }
        const printContainer = document.querySelector('#printContainer');
        if (printContainer) {
            printContainer.parentElement?.removeChild(printContainer);
        }
        PDFViewerApplication.unbindWindowEvents();
        PDFViewerApplication._cleanup();
        const w = window;
        delete w.pdfViewerSanitizer;
        delete w.pdfjsLib;
        this.onPDFJSInitSignal.set(undefined);
        document.querySelectorAll('.ngx-extended-pdf-viewer-script').forEach((e) => {
            e.onload = null;
            e.remove();
        });
        document.querySelectorAll('.ngx-extended-pdf-viewer-file-input').forEach((e) => {
            e.remove();
        });
    }
    replaceBrowserPrint(useCustomPrintOfPdfJS) {
        if (useCustomPrintOfPdfJS) {
            if (this.PDFViewerApplication?.printPdf) {
                window.print = this.PDFViewerApplication.printPdf;
            }
        }
        else {
            if (this.originalPrint && !this.originalPrint.toString().includes('printPdf')) {
                window.print = this.originalPrint;
            }
        }
    }
    iOSVersionRequiresES5() {
        if (typeof window === 'undefined') {
            // server-side rendering
            return false;
        }
        const match = navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
        if (match !== undefined && match !== null) {
            return parseInt(match[1], 10) < 14;
        }
        return false;
    }
    async needsES5() {
        if (typeof window === 'undefined') {
            // server-side rendering
            return false;
        }
        if (this._needsES5 === undefined) {
            const isIE = !!globalThis.MSInputMethodContext && !!document.documentMode;
            const isEdge = /Edge\/\d./i.test(navigator.userAgent);
            const isIOs13OrBelow = this.iOSVersionRequiresES5();
            let needsES5 = typeof ReadableStream === 'undefined' || typeof Promise['allSettled'] === 'undefined';
            if (needsES5 || isIE || isEdge || isIOs13OrBelow || this.forceUsingLegacyES5) {
                this._needsES5 = true;
                return true;
            }
            this._needsES5 = !(await this.ngxExtendedPdfViewerCanRunModernJSCode());
        }
        return this._needsES5;
    }
    ngxExtendedPdfViewerCanRunModernJSCode() {
        return new Promise((resolve) => {
            const support = globalThis.ngxExtendedPdfViewerCanRunModernJSCode;
            support !== undefined ? resolve(support) : resolve(this.addScriptOpChainingSupport());
        });
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.11", ngImport: i0, type: PDFScriptLoaderService, deps: [{ token: i1.PdfCspPolicyService }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.11", ngImport: i0, type: PDFScriptLoaderService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.11", ngImport: i0, type: PDFScriptLoaderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.PdfCspPolicyService }] });
//# sourceMappingURL=data:application/json;base64,